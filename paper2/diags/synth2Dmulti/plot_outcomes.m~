function [inversion_results] = plot_outcomes(dirname)
currentdir = pwd;
cd(dirname)

opttype = 'fortran'; % 'fortran' or 'matlab'
load(['randsearch_',opttype,'.mat'])
[sorted_x2, ind]=sort(xend(2,:));

[nevnts, nrand] = size(xend);

% Have a quick look at the solution space
figure
colorlookup = {'b.','r.','g.','c.','m.','y.','k.','bo','ro','go'};
colorlookup2 = {'b^','r^','g^','c^','m^','y^','k^','bd','rd','gd'};
for i = 1:nevnts
    
    for j = 1:nrand
        plot([xend(i,j) E(i,1)], [yend(i,j) E(i,2)],'Color',[0.7 0.7 0.7])
        
    end
    plot(xend(i,:), yend(i,:),'ro','markersize',10)
    hold on
    plot(E(i,1),E(i,2), 'bo', 'markersize',10)
    hold on
    
end
plot([ 0 0], get(gca,'ylim'),'k')
plot(get(gca,'xlim'),[0 0],'k')



% figure
% colorlookup = {'b+','bo','b^','bV','bd','bs','b*','bp','b>','b<'}
% colorlookup2 = {'r+','ro','r^','rV','rd','rs','r*','rp','r>','r<'}
% ind = find(f<-127.38);
% for i = 1:nevnts
%     plot(E(i,1), E(i,2), 'bo','markersize',10)
%     hold on
%     %plot(xend(i,ind(j)),-yend(i,ind(j)), colorlookup{i})
%     for j = 1:length(ind)
%         plot(xend(i,ind(j)),yend(i,ind(j)), 'ro','markersize',10)
%         hold on
%         plot([xend(i,ind(j)) E(i,1)], [yend(i,ind(j)) E(i,2)],'Color',[0.7 0.7 0.7]),'linewidth',2,'markersize',10
%     end
% end
% set(gca,'xlim',[-70,70], 'ylim',[-70,70], 'fontsize',18)
% xlabel('x (m)')
% ylabel('y (m)')
% print -depsc locs_2D_50eq_4.eps      

% [nevnts, nrand] = size(xend);
% % compute error as distancenorm
% for k = 1:nrand
%    count = 1
%    sq_seperror(k) = sum( sqrt( (E(:,1) - xend(:,k)).^2 + (E(:,2) - yend(:,k)).^2 ) );
% end
% [sortedf,indf] = sort(f);
% figure
% subplot(2,1,1)
% plot(sortedf)
% ylabel('Lstar')
% xlabel('Run Number after sorting')
% subplot(2,1,2)
% plot(sq_seperror(indf)/(nevnts*2-2-1))
% ylabel('sep error per free location parameter')
% xlabel('Run Number after sorting')
% disp(['sep per invertable parameter = ', num2str(sq_seperror(indf)/(nevnts*2-2-1))])

[nevnts, nrand] = size(xend);


% Do analysis of all solutions
ExMat = repmat(E(2:end,1), 1,nrand);  % Note we are omiting the 0 values
EyMat = repmat(E(3:end,2), 1,nrand);
deltaxMat = ExMat - xend(2:end,:); 
deltayMat = EyMat - yend(3:end,:);
deltax = deltaxMat(:);
deltay = deltayMat(:);
delta_coord = [deltax; deltay];
inversion_results.allsol.nrand = nrand;
inversion_results.allsol.fminval = f;
inversion_results.allsol.minval = min(abs(delta_coord));
inversion_results.allsol.maxval = max(abs(delta_coord));
inversion_results.allsol.meanval = mean(abs(delta_coord));
inversion_results.allsol.stdval = std(abs(delta_coord));

% Do analysis for the best solution. 
clear deltax deltay delta_coord
[fminval,ind_fmin] = min(f);
deltax = E(2:end,1) - xend(2:end,ind_fmin);
deltay = E(3:end,2) - yend(3:end,ind_fmin);
delta_coord = [deltax; deltay];
inversion_results.bestsol.fminval = fminval;
inversion_results.bestsol.minval = min(abs(delta_coord));
inversion_results.bestsol.maxval = max(abs(delta_coord));
inversion_results.bestsol.meanval = mean(abs(delta_coord));
inversion_results.bestsol.stdval = std(abs(delta_coord));



cd(currentdir)
% 




